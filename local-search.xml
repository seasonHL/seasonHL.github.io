<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vite+react路由页面配置</title>
    <link href="/2023/02/20/import.meta.glob/"/>
    <url>/2023/02/20/import.meta.glob/</url>
    
    <content type="html"><![CDATA[<h2 id="vite-react路由页面配置"><a href="#vite-react路由页面配置" class="headerlink" title="vite+react路由页面配置"></a>vite+react路由页面配置</h2><p>当我们在使用react进行开发通常会使用router进行不同页面切换，在这之前肯定要对页面进行路由配置（除非你使用nextjs之类的框架）。那就导致每多出一个页面都要去修改配置文件。写程序就是要避免这种简单且繁琐的事情，于是我了解到vite的一个批量导入的方法</p><h3 id="import-meta-glob"><a href="#import-meta-glob" class="headerlink" title="import.meta.glob"></a>import.meta.glob</h3><p>Vite 支持使用特殊的 <code>import.meta.glob</code> 函数从文件系统导入多个模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pageModule = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&quot;./pages/*/*.jsx&quot;</span>);<br></code></pre></td></tr></table></figure><p>以上代码将会转译成下面的样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pageModule = &#123;<br>    <span class="hljs-string">&#x27;./pages/home/home.jsx&#x27;</span>:<span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(./pages/home/home.<span class="hljs-property">jsx</span>),<br>    <span class="hljs-string">&#x27;./pages/about/about.jsx&#x27;</span>:<span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(./pages/about/about.<span class="hljs-property">jsx</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><p>匹配到的文件默认是懒加载的，通过动态导入实现，可以穿入第二个参数进行配置，参考<a href="https://vitejs.cn/vite3-cn/guide/features.html#json">功能 | Vite 官方中文文档 (vitejs.cn)</a></p><h3 id="导入组件"><a href="#导入组件" class="headerlink" title="导入组件"></a>导入组件</h3><p>我们可以在导入模块时进行配置得到默认导出的页面组件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pageModule = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&quot;./pages/*/*.jsx&quot;</span>, &#123;<br>  <span class="hljs-attr">eager</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">import</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>得到的pageModule通过Object 的<code>entries</code>方法转化成一个二维数组，然后就可以遍历数组进行路由配置（这里以路由表为例）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> router = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pageModule).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [path, <span class="hljs-title class_">Element</span>] = v;<br>  <span class="hljs-keyword">const</span> route = &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i &gt; <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>],<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Element</span> /&gt;</span></span>,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> route;<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果某个页面需要二级路由只需要修改一下代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> router = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pageModule).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [path, <span class="hljs-title class_">Element</span>] = v;<br>  <span class="hljs-keyword">const</span> route = &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i &gt; <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>],<br>    <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Element</span> /&gt;</span></span>,<br>    <span class="hljs-attr">children</span>: <span class="hljs-regexp">/home/</span>.<span class="hljs-title function_">test</span>(path)<br>      ? <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(homePage).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> [path, <span class="hljs-title class_">Element</span>] = v;<br>          <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i &gt; <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>],<br>            <span class="hljs-attr">element</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Element</span> /&gt;</span></span>,<br>          &#125;;<br>        &#125;)<br>      : <span class="hljs-literal">undefined</span>,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> route;<br>&#125;);<br></code></pre></td></tr></table></figure><p>配置好后只需要在对应文件夹下写react组件即可</p>]]></content>
    
    
    <categories>
      
      <category>Vite</category>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vite</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Router Hooks使用</title>
    <link href="/2022/08/25/react%20router/"/>
    <url>/2022/08/25/react%20router/</url>
    
    <content type="html"><![CDATA[<h2 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h2><p>这个钩子返回当前<code>location</code>对象,可获取当前的<code>pathname</code>,<code>hash</code>,<code>key</code>,<code>search</code>,<code>state</code>。</p><p>注:search和state由其它hooks设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br></code></pre></td></tr></table></figure><h2 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h2><p>钩子返回一个函数，允许您以编程方式导航。如果使用<code>replace: true</code>，导航将替换历史堆栈中的当前条目，而不是添加新条目。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/home&quot;</span>, &#123; <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;18&quot;</span> &#125;, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个参数是需要跳转的路径，第二个参数是传递状态信息，(<code>location</code>中的<code>state</code>,是否替换当前路径等)。</p><h2 id="useOutletContext"><a href="#useOutletContext" class="headerlink" title="useOutletContext"></a>useOutletContext</h2><p>通常，父路由管理您希望与子路由共享的状态或其他值。如果您愿意，您可以创建自己的<a href="https://reactjs.org/docs/context.html">上下文提供程序</a>，但使用<code>&lt;Outlet /&gt;</code>是一种常见的情况。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> <span class="hljs-attr">context</span>=<span class="hljs-string">&#123;[count,</span> <span class="hljs-attr">setCount</span>]&#125; /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useOutletContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useOutletContext</span>();<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increment&#125;</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数的传递可以是对象或数组，上面的例子还可以写成:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> <span class="hljs-attr">context</span>=<span class="hljs-string">&#123;&#123;count,</span> <span class="hljs-attr">setCount</span>&#125;&#125; /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useOutletContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;count, setCount&#125; = <span class="hljs-title function_">useOutletContext</span>();<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> c + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;increment&#125;</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h2><p>当使用<code>/path/:id</code>形式的动态路由,会从匹配的当前URL返回一个动态参数的键&#x2F;值对对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//以/home/:id为例</span><br><span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params);<br><span class="hljs-comment">//当路径为/home/123时会输出 &#123; id : &#x27;123&#x27; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">event</span>) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-title function_">setSearchParams</span>(&#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaoYang&quot;</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span>&gt;</span>&#123;/* ... */&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>searchParams</code>是一个含有多种方法的对象，<code>setSearchParams</code>可以设置搜索参数。</p><p>可以在<code>location</code>对象中得到<code>search</code>参数”?id&#x3D;123&amp;name&#x3D;xiaoYang”</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redux与Typescript</title>
    <link href="/2022/08/16/redux-typescript/"/>
    <url>/2022/08/16/redux-typescript/</url>
    
    <content type="html"><![CDATA[<h2 id="用Provider提供store"><a href="#用Provider提供store" class="headerlink" title="用Provider提供store"></a>用Provider提供store</h2><p>创建store后可以用<code>Provider</code>将store作为<code>prop</code>传递下去</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>)<br><br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><h2 id="创建一个store"><a href="#创建一个store" class="headerlink" title="创建一个store"></a>创建一个store</h2><p>根据<a href="https://react-redux.js.org/using-react-redux/usage-with-typescript#define-root-state-and-dispatch-types">官方文档</a>，在使用<code>configureStore</code>创建好store后需要提取<code>RootState</code>类型和<code>AppDispatch</code>类型，以便按需引入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; configureStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>(&#123;<br>  <span class="hljs-attr">reducer</span>: &#123;<br>    <span class="hljs-attr">counter</span>:counterReducer<br>  &#125;,<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">RootState</span> = <span class="hljs-title class_">ReturnType</span>&lt;<span class="hljs-keyword">typeof</span> store.<span class="hljs-property">getState</span>&gt;<span class="hljs-comment">//导出store的类型</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">AppDispatch</span> = <span class="hljs-keyword">typeof</span> store.<span class="hljs-property">dispatch</span><span class="hljs-comment">//导出store的dispatch方法类型</span><br></code></pre></td></tr></table></figure><h2 id="创建一个状态片"><a href="#创建一个状态片" class="headerlink" title="创建一个状态片"></a>创建一个状态片</h2><p>store需要的reducer由slice提供。创建一个<code>slice</code>需要一个字符串名称来标识片，一个初始状态值，以及一个或多个reducer函数来定义如何更新状态。一旦一个切片被创建，我们就可以为整个切片导出生成的Redux动作创建器和reducer函数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createSlice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@reduxjs/toolkit&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> counterSlice = <span class="hljs-title function_">createSlice</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;counter&#x27;</span>,<br>  <span class="hljs-attr">initialState</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-attr">increment</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> += <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">decrement</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> -= <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">incrementByAmount</span>: <span class="hljs-function">(<span class="hljs-params">state, action: PayloadAction&lt;<span class="hljs-built_in">number</span>&gt;</span>) =&gt;</span> &#123;<br>      state.<span class="hljs-property">value</span> += action.<span class="hljs-property">payload</span><br>    &#125;,<br>  &#125;,<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="hljs-property">actions</span><span class="hljs-comment">//导出actions</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> counterSlice.<span class="hljs-property">reducer</span><span class="hljs-comment">// 导出reducer</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>基本写法需引入<code>AppDispatch</code>、<code>RootState</code>类型，和切片方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; useDispatch, useSelector, <span class="hljs-title class_">TypedUseSelectorHook</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppDispatch</span>, <span class="hljs-title class_">RootState</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../store/store&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; increment &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../store/slice&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">index</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state: RootState</span>) =&gt;</span> state.<span class="hljs-property">counter</span>.<span class="hljs-property">count</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">dispatch</span>: <span class="hljs-title class_">AppDispatch</span> = <span class="hljs-title function_">useDispatch</span>();<br>  <span class="hljs-comment">// 省略呈现逻辑</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="定义类型hooks"><a href="#定义类型hooks" class="headerlink" title="定义类型hooks"></a>定义类型hooks</h3><p>虽然可以将<code>RootState</code>and<code>AppDispatch</code>类型导入到每个组件中，但最好创建<code>useDispatch</code>和<code>useSelector</code>hooks 的类型化版本以在您的应用程序中使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypedUseSelectorHook</span>, useDispatch, useSelector &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">RootState</span>, <span class="hljs-title class_">AppDispatch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-comment">//在整个应用中使用，而不是普通的&#x27; useDispatch &#x27;和&#x27; useSelect &#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">useAppDispatch</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">AppDispatch</span> = useDispatch<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">useAppSelector</span>: <span class="hljs-title class_">TypedUseSelectorHook</span>&lt;<span class="hljs-title class_">RootState</span>&gt; = useSelector<br></code></pre></td></tr></table></figure><h4 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h4><ul><li><p>不用在每次使用<code>useSelector</code>时输入<code>(state: RootState)</code></p></li><li><p>对于<code>useDispatch</code>，默认<code>Dispatch</code>类型不知道 thunk。为了正确调度 thunk，您需要使用<code>AppDispatch</code>商店中包含 thunk 中间件类型的特定自定义类型，并将其与<code>useDispatch</code>. 添加一个预先输入的<code>useDispatch</code>钩子可以防止你忘记<code>AppDispatch</code>在需要的地方导入。</p></li></ul><h3 id="在组件中使用-Typed-Hooks"><a href="#在组件中使用-Typed-Hooks" class="headerlink" title="在组件中使用 Typed Hooks"></a>在组件中使用 Typed Hooks</h3><p>在组件文件中，从 React-Redux 导入预类型的钩子而不是标准的钩子。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; useAppSelector, useAppDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;app/hooks&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; decrement, increment &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./counterSlice&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Counter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// “状态”参数被正确输入为“RootState”</span><br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useAppSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">counter</span>.<span class="hljs-property">value</span>)<br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useAppDispatch</span>()<br><br>  <span class="hljs-comment">// 省略呈现逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vite-and-postcss</title>
    <link href="/2022/08/06/postcss/"/>
    <url>/2022/08/06/postcss/</url>
    
    <content type="html"><![CDATA[<h2 id="postcss-px-to-viewport在Vite中如何配置"><a href="#postcss-px-to-viewport在Vite中如何配置" class="headerlink" title="postcss-px-to-viewport在Vite中如何配置"></a>postcss-px-to-viewport在Vite中如何配置</h2><p>因为Vite中已经内联了postcss，所以不需要创建额外的postcss.config.js文件。</p><p><a href="https://vitejs.cn/config/#css-modules">Vite关于postcss</a></p><p>我们只需要在vite.config.js中进行配置即可，具体配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> postcsspxtoviewport <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;postcss-px-to-viewport&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>()<br>  ],<br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">postcss</span>: &#123;<br>      <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-title function_">postcsspxtoviewport</span>(&#123;<br>          <span class="hljs-attr">unitToConvert</span>: <span class="hljs-string">&#x27;px&#x27;</span>, <span class="hljs-comment">// 要转化的单位</span><br>          <span class="hljs-attr">viewportWidth</span>: <span class="hljs-number">750</span>, <span class="hljs-comment">// UI设计稿的宽度</span><br>          <span class="hljs-attr">unitPrecision</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// 转换后的精度，即小数点位数</span><br>          <span class="hljs-attr">propList</span>: [<span class="hljs-string">&#x27;*&#x27;</span>], <span class="hljs-comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span><br>          <span class="hljs-attr">viewportUnit</span>: <span class="hljs-string">&#x27;vw&#x27;</span>, <span class="hljs-comment">// 指定需要转换成的视窗单位，默认vw</span><br>          <span class="hljs-attr">fontViewportUnit</span>: <span class="hljs-string">&#x27;vw&#x27;</span>, <span class="hljs-comment">// 指定字体需要转换成的视窗单位，默认vw</span><br>          <span class="hljs-attr">selectorBlackList</span>: [<span class="hljs-string">&#x27;ignore-&#x27;</span>], <span class="hljs-comment">// 指定不转换为视窗单位的类名，</span><br>          <span class="hljs-attr">minPixelValue</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 默认值1，小于或等于1px则不进行转换</span><br>          <span class="hljs-attr">mediaQuery</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否在媒体查询的css代码中也进行转换，默认false</span><br>          <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否转换后直接更换属性值</span><br>          <span class="hljs-comment">// exclude: [/node_modules/], // 设置忽略文件，用正则做目录名匹配</span><br>          <span class="hljs-attr">exclude</span>: [],<br>          <span class="hljs-attr">landscape</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否处理横屏情况</span><br>        &#125;)<br>      ]<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>完成后重启项目就能看到px转化为vw单位了。</p>]]></content>
    
    
    <categories>
      
      <category>Vite</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
